// TooltipTrigger.cs (Asset Store Ready)
using UnityEngine;
using UnityEngine.EventSystems;

/// <summary>
/// Attach this component to any UI element to make it trigger a tooltip on hover.
/// Contains all instance-specific content, style, and layout settings.
/// </summary>
public class TooltipTrigger : MonoBehaviour, IPointerEnterHandler, IPointerExitHandler
{
    [Header("Tooltip Content")]
    public string title;
    [TextArea(3, 10)]
    public string content;
    public Sprite icon;

    [Header("Custom Styles")]
    [Tooltip("The color to apply to the title text.")]
    public Color titleColor = Color.white;
    [Tooltip("The color to tint the icon. White means no tint.")]
    public Color iconColor = Color.white;

    [Header("Text Wrapping by Width")]
    [Tooltip("The max width in pixels for the title before it wraps. Set to 0 to disable.")]
    public float titleMaxWidth = 0f;
    [Tooltip("The max width in pixels for the content before it wraps. Set to 0 to disable.")]
    public float contentMaxWidth = 250f; // A sensible default

    [Header("Behavior Settings")]
    [Tooltip("The time in seconds the user must hover before the tooltip appears.")]
    public float hoverDelay = 0.5f;

    /// <summary>
    /// Called by the EventSystem when the mouse pointer enters the UI element.
    /// </summary>
    public void OnPointerEnter(PointerEventData eventData)
    {
        // Pass all data, including the new max width values, to the manager.
        TooltipManager.Instance.ShowTooltip(
            content, title, icon,
            titleColor, iconColor,
            titleMaxWidth, contentMaxWidth,
            hoverDelay
        );
    }

    /// <summary>
    /// Called by the EventSystem when the mouse pointer exits the UI element.
    /// </summary>
    public void OnPointerExit(PointerEventData eventData)
    {
        TooltipManager.Instance.HideTooltip();
    }
}